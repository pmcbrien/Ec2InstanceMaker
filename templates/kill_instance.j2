###############################################################################
# Name:		kill_instance.{{ instance_name }}.sh
# Author:	Rodney Marable <rodney.marable@gmail.com>
# Created On:	June 3, 2019
# Last Changed:	September 19, 2019
# Deployed On:	{{ lookup('pipe','date \"+%B %-d, %Y\"') }}
# Purpose:	Destroy EC2 instance {{ instance_name }}
###############################################################################

#!/bin/bash

# Set the path to the source tree.

SRC_TREE_DIR="`git rev-parse --show-toplevel`"

# Set some critical paths and variables.

INSTANCE_DATA_DIR={{ instance_data_dir }}
INSTANCE_NAME={{ instance_name }}
EC2_KEYPAIR={{ ec2_keypair }}
PRESERVE_IAM_ROLE="{{ preserve_iam_role }}"
SSH_KEYPAIR_FILE={{ ssh_keypair_file }}
SNS_TOPIC_ARN="{{ sns_arn }}"

# Parse the AMI ImageId and EBS SnapshotId tagged with instance_serial_number.

AMI_ID=`aws --region {{ region }} ec2 describe-images --filters Name=tag-value,Values={{ instance_serial_number }} | jq '.Images[].ImageId' | tr -d \"`
AMI_SNAPSHOT_ID=`aws --region {{ region }} ec2 describe-images --filters Name=tag-value,Values={{ instance_serial_number }} | jq '.Images[].BlockDeviceMappings[].Ebs.SnapshotId' | tr -d \"`

# Pause for 5 seconds before deleting anything.

echo ""
{% if count > 1 %}
echo "EC2 instance family \"{{ instance_name }}\" is marked for termination."
{% else %}
echo "EC2 instance \"{{ instance_name }}\" is marked for termination."
{% endif %}
echo ""
echo "################################################################################"
echo "################  Please type CTRL-C within 5 seconds to abort  ################"
echo "################################################################################"
sleep 5
echo ""
{% if count > 1 %}
echo "Destroying instance family: {{ instance_name }}"
{% else %}
echo "Destroying instance: {{ instance_name }}"
{% endif %}
echo ""

{% if enable_fsx == "true" %}
{% if count > 1 %}
# Parse the Lustre file system DNS name and fs_id of this instance family.
{% else %}
# Parse the Lustre file system DNS name and fs_id of this instance.
{% endif %}

FSX_DNS_NAME=`aws --region {{ region }} fsx describe-file-systems | jq '.FileSystems[] | [.DNSName, (.Tags|from_entries|.InstanceSerialNumber)] | @csv' | grep {{ instance_serial_number }} | awk -F, '{print $1}' | tr -d \" | tr -d '\\'`
FSX_FS_ID=`aws --region {{ region }} fsx describe-file-systems | jq '.FileSystems[] | [.FileSystemId, (.Tags|from_entries|.InstanceSerialNumber)] | @csv' | grep {{ instance_serial_number }} | awk -F, '{print $1}' | tr -d \" | tr -d '\\'`

# Delete the Lustre file system.

aws --region {{ region }} fsx delete-file-system --file-system-id $FSX_FS_ID
echo ""
echo "Deleted Lustre file system: $FSX_DNS_NAME"
echo ""
{% endif %}

{% if count > 1 %}
# Destroy the instance family and associated resources created by Terraform.
{% else %}
# Destroy the instance and associated resources created by Terraform.
{% endif %}

cd $INSTANCE_DATA_DIR
{% if request_type == 'ondemand' %}
{% if debug_mode == 'true' %}TF_LOG=DEBUG {% endif %}terraform destroy -auto-approve{% if preserve_efs == 'false' %} -target=aws_efs_file_system.efs-${INSTANCE_NAME} -target=aws_efs_mount_target.efs-mountTarget-${INSTANCE_NAME}{% endif %} -target=aws_instance.${INSTANCE_NAME}
{% else %}
{% if debug_mode == 'true' %}TF_LOG=DEBUG {% endif %}terraform destroy -auto-approve{% if preserve_efs == 'false' %} -target=aws_efs_file_system.efs-${INSTANCE_NAME} -target=aws_efs_mount_target.efs-mountTarget-${INSTANCE_NAME}{% endif %} -target=aws_spot_instance_request.${INSTANCE_NAME}
{% endif %}
cd $SRC_TREE_DIR

{% if count > 1 %}
# Delete the ec2_keypair and PEM files associated with this instance family.
{% else %}
# Delete the ec2_keypair and PEM files associated with this instance.
{% endif %}

aws --region {{ region }} ec2 delete-key-pair --key-name $EC2_KEYPAIR
echo "Deleted EC2 keypair: $EC2_KEYPAIR"
for file in $INSTANCE_DATA_DIR/$SSH_KEYPAIR_FILE $SRC_TREE_DIR/$SSH_KEYPAIR_FILE
do
	if [ -f $file ]
	then
		rm $file
		echo "Deleted SSH keypair file: $file"
	fi
done

# Delete the EC2 security group.

{% if enable_fsx == 'true' %}
(sleep 300 ; aws --region {{ region }} ec2 delete-security-group --group-id {{ vpc_security_group_ids }}) 2>/dev/null &
SG_GROUPNAME=`aws --region {{ region }} ec2 describe-security-groups --filters Name=group-id,Values={{ vpc_security_group_ids }} | jq '.SecurityGroups[].GroupName' | tr -d \"`
echo "Marked EC2 security group for deletion: $SG_GROUPNAME"
{% else %}
aws --region {{ region }} ec2 delete-security-group --group-id {{ vpc_security_group_ids }}
{% endif %}

# Delete the EC2 instance data directory.

if [ -d $INSTANCE_DATA_DIR ]
then
	rm -rf $INSTANCE_DATA_DIR
	echo "Deleted directory: $INSTANCE_DATA_DIR"
fi

{% if enable_placement_group == 'true' %}
# Delete the EC2 placement group.

aws --region {{ region }} ec2 delete-placement-group --group-name ec2pg-{{ instance_serial_number }}

{% endif %}
{% if preserve_ami == 'false' %}

# Delete the AMI ImageId and EBS SnapshotId tagged with instance_serial_number.

if [ ! -z $AMI_ID ]
then
	aws --region {{ region }} ec2 deregister-image --image-id $AMI_ID
	aws --region {{ region }} ec2 delete-snapshot --snapshot-id $AMI_SNAPSHOT_ID
	echo ""
	echo "Deleted AMI: $AMI_ID"
	echo "Deleted EBS snapshot: $AMI_SNAPSHOT_ID"
	echo ""
else
	echo ""
	echo "No AMI image tagged with {{ instance_serial_number }} was found."
	echo ""
fi
{% else %}

# Print a message to the console confirming preservation of the AMI ImageId and
# EBS SnapshotId tagged with instance_serial_number.

if [ ! -z $AMI_ID ]
then
	echo ""
	echo "Preserved AMI: $AMI_ID"
	echo "Preserved EBS snapshot: $AMI_SNAPSHOT_ID"
	echo "*** Delete this snapshot if it isn't needed to avoid additional charges!"
	echo ""
else
	echo ""
	echo "No AMI image tagged with {{ instance_serial_number }} was found."
	echo ""
fi
{% endif %}

# Send an SNS notification that the instance is being terminated.

{% if count > 1 %}
echo "Published instance family termination message:"
aws sns publish --topic-arn $SNS_TOPIC_ARN --subject "[Ec2InstanceMaker] Instance Family Termination Notice" --message "EC2 instance family {{ instance_name }} was terminated on `date +%Y-%m-%d` at `date +%H:%M.`"
{% else %}
echo "Published instance termination message:"
aws --region {{ region }} sns publish --topic-arn $SNS_TOPIC_ARN --subject "[Ec2InstanceMaker] Instance Termination Notice" --message "EC2 instance {{ instance_name }} was terminated on `date +%Y-%m-%d` at `date +%H:%M.`  There were {{ count }} instances terminated in this family."
{% endif %}

# Delete the SNS topic.

aws --region {{ region }} sns delete-topic --topic-arn $SNS_TOPIC_ARN
echo "Deleted SNS topic: $SNS_TOPIC_ARN"
echo ""
{% if preserve_iam_role == 'false' %}

# Since PRESERVE_IAM_ROLE is false, take the following actions:
# 	- Delete the IAM EC2 instance policy.
# 	- Remove the IAM role from the EC2 instance profile.
# 	- Delete the IAM EC2 instance profile and role.

if [[ $PRESERVE_IAM_ROLE="false" ]]
then
	aws iam delete-role-policy --role-name {{ ec2_iam_instance_role }} --policy-name {{ ec2_iam_instance_policy }}
	aws iam remove-role-from-instance-profile --instance-profile-name {{ ec2_iam_instance_profile }} --role-name {{ ec2_iam_instance_role }}
	aws iam delete-instance-profile --instance-profile-name {{ ec2_iam_instance_profile }}
	aws iam delete-role --role-name {{ ec2_iam_instance_role }}
	echo "Deleted IAM EC2 policy: {{ ec2_iam_instance_policy }}"
	echo "Deleted IAM EC2 instance profile: {{ ec2_iam_instance_profile }}"
	echo "Deleted IAM EC2 role: {{ ec2_iam_instance_role }}"
fi
{% else %}

# Since PRESERVE_IAM_ROLE is true, don't delete any IAM entities associated
# with the instance(s).

if [[ $PRESERVE_IAM_ROLE="false" ]]
then
	echo "Preserved EC2 IAM instance policy: {{ ec2_iam_instance_policy }}"
	echo "Preserved EC2 IAM instance profile: {{ ec2_iam_instance_profile }}"
	echo "Preserved EC2 IAM instance role: {{ ec2_iam_instance_role }}"
fi
{% endif %}

# Remove all state data associated with {{ instance_name }}.

echo ""
echo "Deleted state files:"
for file in {{ vars_file_path }} {{ instance_serial_number_file }}
do
	if [ -f $file ]
	then
		rm $file
		echo "	$file"
	fi
done

# Delete symlinks to the top-level shell scripts.

cd $SRC_TREE_DIR
echo ""
echo "Removed symlinks:"
for link in kill-instance.{{ instance_name }}.sh build-ami.{{ instance_name }}.sh
do
	if [ -L $link ]
	then
		unlink $link
		echo "	$link"
	fi
done

# Cleanup and exit.

echo ""
echo "###############################################################################"
{% if count > 1 %}
echo "##    Finished deleting EC2 instance family: {{ instance_name }}"
echo "##                           Instance count: {{ count }}"
{% else %}
echo "##    Finished deleting EC2 instance: {{ instance_name }}"
{% endif %}
echo "###############################################################################"
echo ""
echo "Exiting..."
exit 0
