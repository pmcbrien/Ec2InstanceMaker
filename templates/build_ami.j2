################################################################################
# Name:         build_ami.{{ instance_name }}.sh
# Author:       Rodney Marable <rodney.marable@gmail.com>
# Created On:   June 28, 2019
# Last Changed: September 19, 2019
# Deployed On:	{{ lookup('pipe','date \"+%B %-d, %Y\"') }}
# Purpose:      Create a new AMI from an instance spawned by Ec2InstanceMaker
################################################################################

#!/bin/bash

# Define the name of the AMI to create.

AMI_NAME="ami-{{ instance_serial_number }}"
{% if preserve_ami == 'false' %}

# Print a console warning that this AMI will *NOT* be preserved when the
# instance is terminated.  This is non-default behavior that the operator
# had to have intentionally enabled by setting "--preserve_ami=false" when
# the instance was originally built.

echo ""
echo "*** ALERT ***"
echo "Because make-instance.py was invoked with 'preserve_ami=false', this AMI"
{% if count > 1 %}
echo "will be *DELETED* along with instance family: {{ instance_name }}"
{% else %}
echo "will be *DELETED* along with instance: {{ instance_name }}"
{% endif %}
echo ""
echo "Relaunching {{ instance_name }} using the new AMI will *NOT* be possible!"
{% endif %}

# Parse the source AMI from instance_serial_number.

echo ""
echo "Parsing the InstanceId of the AMI source..."
echo ""
AMI_SRC_EC2_ID=`aws --region {{ region }} ec2 describe-instances --filters Name=tag-value,Values={{ instance_serial_number }} | jq '.Reservations[].Instances[].InstanceId' | head -1 | tr -d \"`

# Warn the operator that the source instance will be shut down to create the
# image and offer a 5-second window to hit CTRL-C.

echo "##############################################################################"
echo "#                              *** WARNING ***                               #"
echo "#                 Preparing to shut down the source instance!                #"
echo "#    Please type CTRL-C within 5 seconds if this is *NOT* what you wanted!   #"
echo "##############################################################################"
sleep 5

# Check to see if another AMI already exists.

AMI_ID=`aws --region {{ region }} ec2 describe-images --filters Name=tag-value,Values={{ instance_serial_number }} | jq '.Images[].ImageId' | tr -d \"`
if [ ! -z $AMI_ID ]
then
	echo ""
	echo "*** WARNING ***"
	echo "Found an existing AMI ID: $AMI_ID"
	echo ""
	read -p 'Type DELETE to remove and replace: ' DELETE_AMI
	if [[ $DELETE_AMI == "DELETE" ]]
	then
		aws --region {{ region }} ec2 deregister-image --image-id $AMI_ID
		aws --region {{ region }} ec2 delete-snapshot --snapshot-id $AMI_SNAPSHOT_ID
		echo ""
		echo "Deleted AMI: $AMI_ID"
		echo "Deleted EBS snapshot: $AMI_SNAPSHOT_ID"
		echo ""
	else
		echo ""
		echo "*** ERROR ***"
		echo "The existing AMI will not be removed!"
		echo "Aborting..."
		exit 1
	fi
fi

# Shut down the instance.

echo ""
echo "Shutting down the instance that will be used to build the new AMI..."
echo "This may take a few minutes so please be patient!"
echo ""
aws --region {{ region }} ec2 stop-instances --instance-ids $AMI_SRC_EC2_ID
aws --region {{ region }} ec2 wait instance-stopped --instance-ids $AMI_SRC_EC2_ID

# Create the new AMI.

echo ""
echo "Creating the new AMI..."
echo ""
AMI_ID=`aws --region {{ region }} ec2 create-image --instance-id $AMI_SRC_EC2_ID --name $AMI_NAME --description "Spawned from Ec2InstanceMaker" | grep ImageId | awk '{print $2}' | tr -d \"`
AMI_SNAPSHOT_ID=`aws --region {{ region }} ec2 describe-images --filters Name=image-id,Values=$AMI_ID | jq '.Images[].BlockDeviceMappings[].Ebs.SnapshotId' | tr -d \"`
echo "Waiting for the new AMI to become available..."
echo ""
aws --region {{ region }} ec2 wait image-available --image-ids=$AMI_ID
AMI_SNAPSHOT_ID_ENCRYPTED=`aws --region {{ region }} ec2 describe-images --filters Name=image-id,Values=$AMI_ID_ENCRYPTED | jq '.Images[].BlockDeviceMappings[].Ebs.SnapshotId' | tr -d \"`
echo "Waiting for the EBS snapshotting process to complete..."
echo ""
aws --region {{ region }} ec2 wait snapshot-completed --snapshot-ids $AMI_SNAPSHOT_ID

# Tag the new AMI and its associated EBS snapshot.

echo "Tagging the new AMI..."
echo ""
aws --region {{ region }} ec2 create-tags --resource $AMI_ID --tags Key=Name,Value={{ instance_name }} Key=InstanceSerialNumber,Value={{ instance_serial_number }} Key=InstanceOwner,Value={{ instance_owner }} Key=InstanceOwnerEmail,Value={{ instance_owner_email }} Key=InstanceOwnerDepartment,Value={{ instance_owner_department }} Key=InstanceFamily,Value={{ instance_serial_number }}-{{ instance_type }} Key=EC2RequestType,Value={{ request_type }}{% if 'UNDEFINED' not in project_id %} Key=ProjectId,Value={{ project_id }}{% endif %} Key=DEPLOYMENT_DATE,Value=\"{{ DEPLOYMENT_DATE_TAG }}\" Key=OperatingSystem,Value={{ base_os }} Key=EBSEncryption,Value={{ ebs_encryption | bool | lower }}
echo "Tagging the new EBS snapshot..."
echo ""
aws --region {{ region }} ec2 create-tags --resource $AMI_SNAPSHOT_ID --tags Key=Name,Value={{ instance_name }} Key=InstanceSerialNumber,Value={{ instance_serial_number }} Key=InstanceOwner,Value={{ instance_owner }} Key=InstanceOwnerEmail,Value={{ instance_owner_email }} Key=InstanceOwnerDepartment,Value={{ instance_owner_department }} Key=InstanceFamily,Value={{ instance_serial_number }}-{{ instance_type }} Key=EC2RequestType,Value={{ request_type }}{% if 'UNDEFINED' not in project_id %} Key=ProjectId,Value={{ project_id }}{% endif %} Key=DEPLOYMENT_DATE,Value=\"{{ DEPLOYMENT_DATE_TAG }}\" Key=OperatingSystem,Value={{ base_os }} Key=EBSEncryption,Value={{ ebs_encryption | bool | lower }}

# Restart the source EC2 instance.

echo "Restarting the source EC2 instance..."
echo ""
aws --region {{ region }} ec2 start-instances --instance-ids $AMI_SRC_EC2_ID
aws --region {{ region }} ec2 wait instance-running --instance-ids $AMI_SRC_EC2_ID

# Print guidance on how to launch instances with the new AMI to the console.

SRC_TREE_DIR="`git rev-parse --show-toplevel`"
ACTIVE_STATE_FILE=$SRC_TREE_DIR/active_instances/{{ instance_name }}.serial
MAKE_INSTANCE_CMD=`grep make-instance.py $ACTIVE_STATE_FILE`
echo ""
echo "Finished building: $AMI_ID"
echo ""
echo "To relaunch {{ instance_name }} with this new AMI:"
echo "\$ ./kill-instance.{{ instance_name }}.sh"
echo "\$ ${MAKE_INSTANCE_CMD} --custom_ami=$AMI_ID"

# Cleanup and exit.

echo ""
echo "Exiting..."
exit 0
